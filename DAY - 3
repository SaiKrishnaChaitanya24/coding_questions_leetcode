question 1 is as follows:
https://leetcode.com/problems/search-insert-position/
The code that I have written is :
class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        j,k = 0,0
        for i in range(0,len(nums)):
            if nums[i] == target:
                return i
        nums.append(target)
        nums.sort()
        for j in range(0,len(nums)):
            if nums[j]==target:
                return j
Here is question 2 -
https://leetcode.com/problems/implement-strstr/
The code that I have written is :
class Solution(object):
       def strStr(self, haystack, needle):
        if needle in haystack:
            return haystack.index(needle)
        return -1
Here is question 3 -
https://leetcode.com/problems/reverse-bits/
the logic is int to 32 bit unsigned int, then reverse it then convert back to int.
class Solution:
    # @param n, an integer
    # @return an integer
    def reverseBits(self, n):
        a = '{0:032b}'.format(n)
        reverse =  a[::-1]
        return int(reverse,2)
question 4-
https://leetcode.com/problems/running-sum-of-1d-array/
class Solution:
    def runningSum(self, nums: List[int]) -> List[int]:
        l = []
        k = nums[0]
        l.append(k)
        for i in range(1,len(nums)):
            k = k + nums[i]
            l.append(k)
        return l
